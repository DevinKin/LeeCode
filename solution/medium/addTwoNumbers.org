#+TITLE: LeetCode-两数相加
#+CATEGORIES: LeetCode
#+DESCRIPTION: 每天一题LeetCode
#+KEYWORDS: LeetCode,Java
#+DATE: 2018-11-11 21:45

* Medium-两数相加
** 题目描述
给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

** 示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

* 自己的解答
** 思路
1. 按顺序遍历两个链表,并用sum记录两个链表的和,初始化进位标志变量carry为0.
2. 进位carry用sum/10得到,sum不管是否大于10,可以通过sum%10得到该位置的数.
3. 创建一个新的节点,用sum初始化,并添加到节点的尾部.
4. 返回新的链表.
** 代码
#+BEGIN_SRC java
  package algorithm.medium;


  class ListNode {
      int val;
      ListNode next;

      ListNode(int x) {
          val = x;
      }
  }

  public class AddTwoNumbers {
      public ListNode solution(ListNode l1, ListNode l2) {
          ListNode tmp = new ListNode(0);
          ListNode p1 = l1;
          ListNode p2 = l2;
          ListNode res = tmp;

          int carry = 0;
          while (p1 != null || p2 != null) {
              int x = (p1 == null) ? 0 : p1.val;
              int y = (p2 == null) ? 0 : p2.val;
              int sum = x + y + carry;
              // 判断是否有进位
              carry = sum / 10;
              // 取结果的mod 10
              sum %= 10;

              tmp.next = new ListNode(sum);

              tmp = tmp.next;
              if (p1 != null) {
                  p1 = p1.next;
              }
              if (p2 != null) {
                  p2 = p2.next;
              }
          }
          // 最后还有进位,添加到节点的末尾
          if (carry == 1) {
              tmp.next = new ListNode(carry);
          }
          return res.next;
      }
  }
#+END_SRC
