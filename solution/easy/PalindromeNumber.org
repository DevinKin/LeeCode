#+TITLE: LeetCode-回文数
#+CATEGORIES: LeetCode
#+DESCRIPTION: 每天一题LeetCode
#+KEYWORDS: LeetCode,Java
#+DATE: 2018-10-25 21:39


* Easy-回文数

** 题目描述
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

** 示例1:
输入: 121
输出: true

** 示例2:
输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。

** 示例 3:
输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。

* 自己的答案

** 思路
1. 将每个数字通过余10的方式取得并存储到一个数组中,然后遍历数组,比较数组两端的元素是否一致
2. 如果不一致,不是回文数,返回false
3. 如果都一致,是回文数,返回true
4. 负数均不是回文数,返回false

** 代码
#+BEGIN_SRC java
package algorithm.easy;

import java.util.ArrayList;
import java.util.List;

public class PalindromeNumber {

    public static boolean isPalindrome(int x) {
        // 如果是负数,不是回文数,直接返回false.
        if (x < 0) {
            return false;
        }
        List<Integer> list = new ArrayList<>();
        // 取出每一位数字
        while (x != 0) {
            list.add(x % 10);
            x /= 10;
        }
        // 对比,检验是否为回文数
        for (int i = 0; i < list.size() / 2; i++) {
            if (list.get(i) != list.get(list.size() - i - 1)) {
                return false;
            }
        }
        // 是回文数
        return true;
    }

    public static void main(String[] args) {
        System.out.println(isPalindrome(121212));
    }
}
#+END_SRC
   
* 官方解答
方法：反转一半数字

** 思路
映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。

第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于 $int.MAX$，我们将遇到整数溢出问题。

按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 $int$ 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。

例如，输入 $1221$，我们可以将数字“1221”的后半部分从“21”反转为“12”，并将其与前半部分“12”进行比较，因为二者相同，我们得知数字 $1221$ 是回文。

让我们看看如何将这个想法转化为一个算法。

** 算法
首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：$-123$ 不是回文，因为 $-$ 不等于 $3$。所以我们可以对所有负数返回 false。

现在，让我们来考虑如何反转后半部分的数字。 对于数字 1221，如果执行 $1221 % 10$，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，$1221 / 10 = 122$，再求出上一步结果除以10的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。 如果继续这个过程，我们将得到更多位数的反转数字。

现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？

我们将原始数字$以 10，然后给反转后的数字乘上 10，所以，当原始数字小于反转后的数字时，就意味着我们已经处理了一半位数的数字。

** 代码
#+BEGIN_SRC java
  public class Solution {
      // 特殊情况:
      // 如上所述,当x < 0时, x不是回文数
      // 同样的,如果数字的最后一位是0,为了使该数字为回文.
      // 则其第一位数字也应该是0
      // 只有0满足这一属性
      if (x < 0 || (x % 10 && x != 0)) {
	  return false;
      }

      int revertedNumber = 0;
      while(x > revertedNumber) {
	  revertedNumber = revertedNumber * 10 + x % 10;
	  x /= 10;
      }

      // 当数字长度为奇数的时候,我们可以通过 revertedNUmber/10去除处于中位的数字.
      // 例如, 当输入为12321时,在while的循环末尾我们可以得到x=12,revertednumber=123,
      // 由于处于中位的数字不影响回文,它总是与自己相等,所以我们可以简单地将其去除.
      return x == revertedNumber || x == revertedNumber / 10;
  }
#+END_SRC

** 复杂度分析
1. 时间复杂度： $\log_{10}(n)$ ， 对于每次迭代，我们会将输入除以10，因此时间复杂度为 $\log_{10}(n)$ 。
2. 空间复杂度：$O(1)$。
