#+TITLE: LeetCode-罗马数字转整数
#+CATEGORIES: LeetCode
#+DESCRIPTION: 每天一题LeetCode
#+KEYWORDS: LeetCode,Java
#+DATE: 2018-10-26 10:34


* Easy-罗马数字转整数

** 题目描述
罗马数字包含以下七种字符: $I$ ， $V$ ， $X$ ， $L$ ， $C$ ， $D$ 和 $M$ 。

|字符|数值|
|---|---|
|I|1|
|V|5|
|X|10|
|L|50|
|C|100|
|D|500|
|M|1000|

例如， 罗马数字 2 写做 $II$ ，即为两个并列的 1。12 写做 $XII$ ，即为 $X + II$ 。 27 写做  $XXVII$ , 即为 $XX + V + II$  。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 $IIII$ ，而是 $IV$ 。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 $IX$ 。这个特殊的规则只适用于以下六种情况：

- I 可以放在 $V$ (5) 和 $X$ (10) 的左边，来表示 4 和 9。

- X 可以放在 $L$ (50) 和 $C$ (100) 的左边，来表示 40 和 90。 

- C 可以放在 $D$ (500) 和 $M$ (1000) 的左边，来表示 400 和 900。

给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

** 示例 1:
输入: "III"
输出: 3

** 示例 2:
输入: "IV"
输出: 4

** 示例 3:
输入: "IX"
输出: 9
示例 4:

** 示例 4:
输入: "LVIII"
输出: 58
解释: L = 50, V= 5, III = 3.

** 示例 5:
输入: "MCMXCIV"
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.

* 自己的答案
** 思路
1. 将上面的6种特殊情况单独存储在一个special的map中.
2. 将其余7种字符存储在另一个名为romans的map中.
3. 首先先把特殊情况的字符从字符串中去除掉,并将对应的特殊字符的值加入结果中
4. 然后遍历新的字符串,并且从romans中取出对应的的数加入到结果中
** 代码
#+BEGIN_SRC java
package algorithm.easy;

import java.util.LinkedHashMap;
import java.util.Map;

public class RomanToInt {
    private static Map<Character, Integer> romans = new LinkedHashMap<>();
    private static Map<String, Integer> special = new LinkedHashMap<>();

    static {
        romans.put('M', 1000);
        romans.put('D', 500);
        romans.put('C', 100);
        romans.put('L', 50);
        romans.put('X', 10);
        romans.put('V', 5);
        romans.put('I', 1);

        special.put("CM", 900);
        special.put("CD", 400);
        special.put("XC", 90);
        special.put("XL", 40);
        special.put("IX", 9);
        special.put("IV", 4);
    }

    public static int RomanToInt(String s) {
        int res = 0;
        for (String sp : special.keySet()) {
            // 包含特殊的情况,先去除
            if (s.indexOf(sp) != -1) {
                s = s.substring(0, s.indexOf(sp)) + s.substring(s.indexOf(sp) + 2);
                res += special.get(sp);
            }
        }
        for (int i = 0; i < s.length(); i++) {
            Integer base = romans.get(s.charAt(i));
            res+= base;
        }
        System.out.println(res);
        return res;
    }

    public static void main(String[] args) {
        RomanToInt("III");
        RomanToInt("IV");
        RomanToInt("IX");
        RomanToInt("LVIII");
        RomanToInt("MCMXCIV");
        RomanToInt("MMMCMXCIII");
    }
}
#+END_SRC
